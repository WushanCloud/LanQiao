资源限制
时间限制：1.0s   内存限制：512.0MB
问题描述
　　给定n个十六进制正整数，输出它们对应的八进制数。

输入格式
　　输入的第一行为一个正整数n （1<=n<=10）。
　　接下来n行，每行一个由0~9、大写字母A~F组成的字符串，表示要转换的十六进制正整数，每个十六进制数长度不超过100000。

输出格式
　　输出n行，每行为输入对应的八进制正整数。

　　【注意】
　　输入的十六进制数不会有前导0，比如012A。
　　输出的八进制数也不能有前导0。

样例输入
　　2
　　39
　　123ABC

样例输出
　　71
　　4435274

　　【提示】
　　先将十六进制数转换成某进制数，再由某进制数转换成八进制。

#include <iostream>
#include <cstring>
#include <string>
using namespace std;

void binary(char* num, char* arr, int num_len)
{
	int k = 0;
	for (int i = num_len-1; i >=0; i--)
	{
		int c = 0;
		if (num[i] >= '0' && num[i] <= '9')
			c = num[i] - '0';
		else
			c = num[i] - 'A' + 10;
		for (int j = 0; j < 4; j++)
		{
			arr[k++] = c & 1;
			c >>= 1;
		}
	}
}
void octonary(char* arr, int arr_len, string& brr)
{
	for (int i = 0; i < arr_len;)
	{
		char c = 0;
		for (int j = 0; j < 3; j++)
		{
			c = c + (arr[i] << j);
			i++;
		}
		c = c + '0';
		brr = c + brr;
	}
}
int main()
{
	int n = 0;
	cin >> n;
	char** num = new char* [n];

	for (int i = 0; i < n; i++)
	{
		num[i] = new char[100000];
	}
	for (int i = 0; i < n; i++)
	{
		cin >> num[i];
	}
	for (int i = 0; i < n; i++)
	{
		int len = strlen(num[i]);
		//先转2进制
		char* arr = new char[len * 4+2];
		memset(arr, 0, len * 4+2);
		binary(num[i], arr, len);
		//2进制转8进制
		string brr = "";
		octonary(arr, len * 4, brr);
		if (brr[0] == '0')
			cout << brr.substr(1, brr.size() - 1)<< endl;
		else
			cout << brr << endl;
	}
	
	return 0;
}
